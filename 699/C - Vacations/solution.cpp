#include <bits/stdc++.h>using namespace std; // dp[i][prev] = minimum rest days from day i to end, given last day's activity = prev// prev: 0 = rest, 1 = contest, 2 = gym int n;vector<int> a;int dp[105][3]; int rec(int i, int prev) {    if (i == n) return 0; // base case: no more days    int &res = dp[i][prev];    if (res != -1) return res;     res = 1e9; // large number (we want min)     // Option 1: Rest today    res = min(res, 1 + rec(i + 1, 0));     // Option 2: Do contest (only if available & not same as prev)    // (Hint: contest available if a[i] == 1 or 3)    if ((a[i] ==1 || a[i] == 3) && prev != 1) res = min(res, rec(i + 1, 1));      // Option 3: Go gym (only if available & not same as prev)    // (Hint: gym available if a[i] == 2 or 3)    if ((a[i] == 2 || a[i] == 3) && prev != 2) res = min(res, rec(i + 1, 2));     return res;} void solve() {    cin >> n;    a.resize(n);    for (int i = 0; i < n; i++) cin >> a[i];    memset(dp, -1, sizeof(dp));     cout << rec(0, 0) << "\n"; // Start with "previous activity = rest"} int main() {    ios::sync_with_stdio(false);    cin.tie(nullptr);     solve();}