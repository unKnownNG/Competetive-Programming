#include <bits/stdc++.h>using namespace std;  int dfs(vector<vector<int>> &g, vector<vector<int>> & vis, int i, int j){    if(g[i][j] == 0 || vis[i][j] == 1) return 0;    vis[i][j] = 1;     int ans = 0;      if(i + 1 < g.size() &&  vis[i+ 1][j] == 0) ans += dfs(g,vis, i + 1 ,j);    if(j + 1 < g[0].size() &&  vis[i][j + 1] == 0) ans += dfs(g,vis, i , 1 + j);    if(i - 1 >= 0 && vis[i - 1][j] == 0) ans += dfs(g, vis, i - 1, j);    if(j - 1 >= 0 && vis[i][j - 1] == 0) ans += dfs(g, vis, i, j - 1);     return g[i][j] + ans;}   void solve(){    // LOGIC    int n,m;    cin >> n>> m;    vector<vector<int>> g(n, vector<int>(m, -1)), vis(n, vector<int>(m, 0));     for(int i = 0;i < n ; i++){        for(int j = 0; j < m; j++){            cin >> g[i][j];        }    }     int ans = INT_MIN;     for(int i = 0;i < n ; i++){        for(int j = 0; j < m; j++){            if(vis[i][j] == 0){                ans = max(ans, dfs(g,vis, i, j));            }        }    }     cout << ans << endl;  } int main(){    ios::sync_with_stdio(false); // Fast I/O    cin.tie(nullptr);            // Untie cin from cout     int n;    cin >> n;    while(n--) solve();}